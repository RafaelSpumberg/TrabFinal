class Paciente{
    private String nome; 
    private int codigo; 
    private char sexo; 
    private double peso;
    private double altura; 
    private int idade;

    public Paciente (String nome, int codigo, char sexo, double peso, double altura,int idade){
        this.nome = nome;    
        this.codigo = codigo; 
        this.sexo = sexo; 
        this.peso = peso;
        this.altura = altura; 
        this.idade = idade;
    }
    
    public void setNome(String nome){
        if(nome != null)
            this.nome = nome;
    }
    
    public String getNome(){
        return nome;
    }
    
    public void setCodigo(int codigo){
        this.codigo = codigo;
    }
    
    public int getCodigo(){
        return codigo;
    }
    
    public void setSexo(char sexo){
        if(sexo == 'F' || sexo == 'M')
            this.sexo=sexo;
    }
    
    public char getSexo(){
        return sexo;
    }
    
    public void setPeso(double peso){
        if(peso>0 && peso<=150)
            this.peso=peso;   
    }
    
    public double getPeso(){
        return peso;
    }
    
    public void setAltura(double altura){
        if(altura<=2.5)
            this.altura=altura;
    }
    
    public double getAltura(){
        return altura;
    }
    
    public void setIdade(int idade){
        if(altura>= 0 && idade<=120)    
            this.idade= idade;
    }
    
    public int getIdade(){
        return idade;
    }
    
     public double calcularIMC() {
        return peso / (altura * altura);
    }

    public double calcularPesoIdeal() {
        if (sexo == 'M') {
            return 72.7*altura-58;
        } else {
            return 62.1*altura-44.7;
        }
    }
    
    public String toString(){
        return "\nNome: " + getNome() + "\nCódigo: " + getCodigo() + "\nSexxo: " + getSexo() +
                "\nAltura: " + getAltura() + "\nPeso: " + getPeso() + "\nIdade: " + getIdade(); 
    }  
}


public class ListaDePacientes {
    private Paciente[] listaPacientes;
    private int proximoIndice;
    
    public ListaDePacientes(String nome, int tamanho){
        listaPacientes = new Paciente[tamanho];
        proximoIndice=0;
        
    }
    
    public int getProximoIndice(){ 
        return proximoIndice;
    }
    
    //- método validar nome do paciente; 
    public boolean validarNome(String nome) {
        if (nome != null && !nome.isEmpty()) 
            return true;

        else 
            return false;
    }
    
    //- método validar peso do paciente; 
     public boolean validarPeso(double peso) {
        if (peso > 0 && peso <= 150)
            return true;

        else
            return false;
    }
    
    //- método validar altura do paciente;
     public boolean validarAltura(double altura) {
        if (altura > 0 && altura <= 2.5)
            return true;

        else
            return false;
    }
    
    //- método validar idade do paciente;
    public boolean validarIdade(double idade) {
        if (idade >= 0 && idade <= 120)
            return true;

        else
            return false;
    }  
    
    
    //- método que consulta um paciente por nome;
    public Paciente consultaPacientePorNome(String nome){
        if(proximoIndice==0) 
            return null;
        for(int i= 0;i<proximoIndice;i++){
            if(listaPacientes[i].getNome().equalsIgnoreCase(nome))
                return listaPacientes[i];
        }
        return null;
    }
    
    //- método que consulta um paciente por codigo;
    public Paciente consultaPacientePorCodigo(int codigo){
        if(proximoIndice==0) 
            return null;
        for(int i= 0;i<proximoIndice;i++){
            if(listaPacientes[i].getCodigo()==codigo)
                return listaPacientes[i];
        }
        return null;
    }
    
    //- método que mostra uma lista de todos os pacientes com idade acima de um valor informado pelo parâmetro;
    public int[] mostraPacientesIdadeSuperior(int idade){
        int [] mostrarPacientes = new int [proximoIndice];
        int proxInd = 0;
        for(int i=0;i<proximoIndice;i++){
            if(listaPacientes[i].getIdade()>=idade){
                mostrarPacientes[proxInd] = listaPacientes[i].getCodigo();
                proxInd++;
            }
        }
        return mostrarPacientes;
    }
    
    //- método que lista todos os pacientes;
    public Paciente [] mostrarTodosPacientes (){
        Paciente[] todosPacientes = new Paciente [proximoIndice];
        for(int i= 0;i<proximoIndice;i++){
            todosPacientes[i] = listaPacientes[i];
        }
        return todosPacientes;
    }
    
    //- método que cadastra pacientes na lista. O método deve garantir que nenhum paciente de mesmo nome e codigo sejam adicionados a lista de pacientes.
    public boolean cadastrarPaciente(Paciente p1){
        if(proximoIndice==0){
            listaPacientes[proximoIndice] = p1;
            proximoIndice++;
            return true;            
        }
        
        for(int i= 0;i<proximoIndice;i++){
            if(listaPacientes[i].getCodigo()== p1.getCodigo()) // && lista[i].getNome().equals(p.getNome())) {
                return false;
        }
        
        listaPacientes[proximoIndice] = p1;
        proximoIndice++;
        return true;  
    }
    
    //- método que altera o peso de um determinado paciente, informando o seu código;
    public boolean alterarPeso (double peso, int codigo){
        for (int i= 0; i< proximoIndice; i++){
            if(listaPacientes[i].getPeso() == peso)
            listaPacientes[i].setPeso(codigo); 
            return true; 
        }
        return false; 
    }
    
    //- método que altera a altura de um determinado paciente, informando o seu código;
    public boolean alterarAltura (double altura, int codigo){
        for (int i= 0; i< proximoIndice; i++){
            if(listaPacientes[i].getAltura() == altura)
            listaPacientes[i].setAltura(codigo); 
            return true; 
        }
        return false; 
    }  

    //- método que altera o sexo de um determinado paciente, informando seu código;
    public boolean alterarSexo (char sexo, int codigo){
        for (int i= 0; i< proximoIndice; i++){
            if(listaPacientes[i].getSexo() == sexo)
            listaPacientes[i].setSexo(sexo); 
            return true; 
        }
        return false; 
    }
    
    //- método que mostra o IMC de um determinado paciente.
    public double mostrarIMC (double IMC, int codigo, String nome){
        double paciente = 0;
        for(int i= 0;i<proximoIndice;i++){
            paciente = paciente + listaPacientes[i].calcularIMC();
        }
        return paciente;
    }
    
}


import java.util.Scanner; 

public class Aplicação 
{
    public static void main(String args[]){      
       Scanner in = new Scanner(System.in);
       int codigo, idade, tamanho, opcao = 0;
       char sexo;
       double peso, altura;
       String nome;
       

       System.out.println("\fDigite o tamanho da lista de pacientes: ");
       tamanho = in.nextInt();

       ListaDePacientes lp1 = new ListaDePacientes(nome, tamanho);
                
       do{
            menu();
            System.out.println("Digite a opção desejada: ");
            opcao = in.nextInt();
            switch(opcao){
                case 1: System.out.println("\nDigite o/a nome do/a paciente:");
                        nome = in.next();
                        
                        System.out.println("\nDigite seu código:");
                        codigo = in.nextInt();
                        
                        System.out.println("\nDigite o/a sexo/a do/a paciente (F/M): ");
                        sexo = in.next().charAt(0);

                        System.out.println("\nDigite o/a peso do/a paciente: ");
                        peso = in.nextDouble();

                        System.out.println("\nDigite a altura do/a paciente: ");
                        altura = in.nextDouble();

                        System.out.println("\nDigite a idade do/a paciente: ");
                        idade = in.nextInt();
                        
                        Paciente p1 = new Paciente(nome,codigo,sexo,peso,altura,tamanho);
                        if(lp1.cadastrarPaciente(p1))
                            System.out.println("Paciente cadastrado/a");
                        else
                            System.out.println("Paciente não cadastrado/a");
                        break;
                        
                case 2: System.out.println("Digite o nome do paciente:");
                        nome = in.next();
                        Paciente auxiliar = lp1.consultaPacientePorNome(nome);
                        if(auxiliar == null)
                            System.out.println("Paciente não encontrado");
                        else
                            System.out.println(auxiliar.toString());
                        break;
                        
                case 3: System.out.println("Digite o código do paciente:");
                        codigo = in.nextInt();
                        if(lp1.consultaPacientePorCodigo(codigo) == null)
                            System.out.println("\nConta não encontrada com este número");
                        else
                            System.out.println(lp1.consultaPacientePorCodigo(codigo).toString());
                        break;                    
                        
                case 4: System.out.println("Digite uma idade para ver todos os pacientes com idade igual ou acima:");
                        idade = in.nextInt();
                        Paciente [] listaAuxiliar = lp1.mostraPacientesIdadeSuperior(idade);
                        System.out.println("Os pacientes com idade igual ou superior a " + idade + "são:\n");
                        for(int i = 0;i<lp1.getProximoIndice();i++){
                            System.out.println("\n"+listaAuxiliar[i].toString());
                        }
                        break;
                        
                case 5: System.out.println("Segue a lista de todos os pacientes");
                        break;
                        
                case 6: System.out.println("Digite o código do paciente que deseja alterar a altura: ");
                        break;
                        
                case 7: System.out.println("Digite o código do paciente que deseja alterar o peso: ");
                        break;
                        
                case 8: System.out.println("Digite o código do paciente que deseja alterar o sexo: ");
                        break;                        
                case 9: System.out.println("Digite o código do paciente que deseja mostrar o IMC: ");
                        break;
                        
                default: System.out.println("Opção invalida");
                        break;
            }
       }while(opcao!=0);
        System.out.println("Saindo do programa");                
    }
    
    public static void menu(){
        System.out.println("1 - Cadastrar paciente: ");
        System.out.println("2 - Consultar paciente por nome: ");
        System.out.println("3 - Consultar paciente por código: ");
        System.out.println("4 - Listar pacientes com idade acima de um valor: ");
        System.out.println("5 - Listar todos os pacientes: ");
        System.out.println("6 - Alterar altura do paciente por código: ");
        System.out.println("7 - Alterar peso do paciente por código: ");  
        System.out.println("8 - Alterar sexo do paciente por código");
        System.out.println("9 - Mostrar IMC do paciente por código");
        System.out.println("0 - sair");
    }
}
 
